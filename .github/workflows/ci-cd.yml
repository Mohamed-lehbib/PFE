name: CI/CD Pipeline with SonarCloud and Vercel

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  notify-start:
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack Notification (Pipeline Triggered)
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: good
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: |
            *Status*: Pipeline Triggered
            *Repository*: ${{ github.repository }}
            *Run Number*: ${{ github.run_number }}
            *Triggered By*: ${{ github.actor }}

  build:
    runs-on: ubuntu-latest
    needs: notify-start
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "21"
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Run SonarCloud Scan
        id: sonarcloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.host.url=https://sonarcloud.io

      - name: Check Quality Gate
        id: check_quality_gate
        run: |
          status=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }}" | jq -r .projectStatus.status)
          echo "Quality Gate status: $status"
          if [ "$status" != "OK" ]; then
            echo "Quality Gate failed"
            exit 1
          fi
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  notify-end:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    steps:
      - name: Send Slack Notification (Pipeline Completed)
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: |
            *Status*: ${{ job.status }}
            *Commit Message*: ${{ github.event.head_commit.message }}
            *Triggered By*: ${{ github.actor }}
            *Repository*: ${{ github.repository }}
            *Run Number*: ${{ github.run_number }}
